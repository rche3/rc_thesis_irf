clc; clear; close all;

%%%%%
% Script to use Monte Carlo simulation to test the validity of the dependent 
% wild bootstrapping for the LP and SVAR model average IRF estimator
%%%%%

% Set random seed for reproducibility
rng(123);

% Simulation parameters
n_MC = 100;          % Number of Monte Carlo simulations
T = 200;              % Sample size
n_straps = 200;    % Number of bootstrap samples
H = 20;               % IRF horizon
n_vars = 3;           % Number of variables
rind = 3;             % response variable index
sind = 1;             % shock variable index
coverage = zeros(n_MC, H);

% True STRUCTURAL parameters
B = [1, 0, 0;         % variable 1 can only be contemporaneously shocked by itself
     -0.3, 1, 0;      % variable 2 can be shocked by itself + variable 1
     0.2, -0.1, 1];   % variable 3 can be shocked by itself + all other variables

% True structural VAR coefficients
A_str = [0.5, 0.2, -0.1;
         0.1, 0.4, 0.2;
         -0.1, 0.1, 0.6];

% Structural shock variances (diagonal matrix)
D = eye(3);  % Different variances for structural shocks - just set them to be unit variance

% Implied reduced form parameters
A = A_str;  % In this case, coefficients are same (you could make them different)
Binv = inv(B);
Sigma = Binv * D * Binv';  % Reduced form covariance matrix

% Compute true structural IRFs
true_irf = zeros(H, 1);
impact = Binv(:,sind);  % Initial impact of structural shock sind
true_irf(1) = impact(rind);  % Store response of variable rind
companion = A;

% Compute subsequent horizons for true IRF
for i = 2:H
    temp = companion^(i-1) * impact;
    true_irf(i) = temp(rind);
end

%% Monte Carlo simulation - model average

% settings
nlag = 4;
bootstrap_ci_method = "normal";
clevel = 1.96; % we are interested 95% CI
lambda = 0.5;
timePerLoop = zeros(n_MC, 1);  % Store time for each iteration

for i = 1:n_MC
    % Generate data from VAR(1)
    iterStart = tic;  % Start timing this iteration

    disp(['Running MC rep number ', num2str(i)]);
    Y = zeros(T, 3);
    eps = mvnrnd(zeros(3,1), D, T);
    for t = 2:T
        By_t = Y(t,:) + Y(t-1,:) * A' + eps(t,:);
        Y(t,:) = By_t * inv(B);
    end

    % prepare variables for estimation
    data = Y(:,rind);
    % not sure how to convert this here given we are no longer reg on a shock
    
    shock = Y(:,sind); % the shock here should be initialised as contemporaneous to the response variable
    ylag = lagmatrix(Y, [1:nlag]);
    ylag = ylag(nlag+1:end,:);
    Teff = size(ylag, 1);

    % create final Y and X data vectors for LP
    x = [ones(Teff,1) shock(nlag+1:end,:) ylag];
    data_y = data(nlag+1:end,:);
    rpos = rind;
    transformation = 1;
    opt = 0;

    % VAR specs
    normalise = 1;
    y = Y;
    
    % Estimate linSVARLP_avg on MC sample
    [liny, confidencey] = linSVARLP_avg(H,nlag,bootstrap_ci_method, clevel, n_bootstrap, lambda, ...
        data_y,x,rpos,transformation,opt, ...
        y,rind,sind,normalise);
    
    lower_ci = confidencey(1,:,:);
    upper_ci = confidencey(2,:,:);
    
    % Check coverage
    for h = 1:H
        coverage(i,h) = true_irf(h) >= lower_ci(:,h) & true_irf(h) <= upper_ci(:,h);
    end
    temp_coverage = mean(coverage(1:i,:), 1);
    
    disp(['Current coverage is: ', num2str(temp_coverage)])
    % Calculate and display timing for this iteration
    timePerLoop(i) = toc(iterStart);
    estimatedTimeRemaining = mean(timePerLoop(1:i)) * (n_MC - i);
    
    fprintf('Iteration %d/%d completed in %.2f seconds\n', i, n_MC, timePerLoop(i));
    fprintf('Estimated time remaining: %.2f minutes\n', estimatedTimeRemaining/60);
end

% Results
mean_coverage = mean(coverage,1); % 1 = rows, to "collapse" the rows

fprintf('Empirical coverage rate: %.3f ', mean_coverage);

save("Bootstrap/results/mdl_avg_MC100_BS200.mat", "mean_coverage")

%% Monte Carlo simulation - LP

% specs for model average estimation
nlag = 4;
bootstrap_ci_method = "normal";
clevel = 1.96; % we are interested 95% CI
lambda = 0.5;
timePerLoop = zeros(n_MC, 1);  % Store time for each iteration
n_straps = 200;
n_MC = 300;

for i = 1:n_MC
    % Generate data from VAR(1)
    iterStart = tic;  % Start timing this iteration

    disp(['Running MC rep number ', num2str(i)]);
    Y = zeros(T, 3);
    eps = mvnrnd(zeros(3,1), D, T);
    for t = 2:T
        By_t = Y(t,:) + Y(t-1,:) * A' + eps(t,:);
        Y(t,:) = By_t * inv(B);
    end

    % prepare variables for estimation
    data = Y(:,rind);
    % not sure how to convert this here given we are no longer reg on a shock
    
    shock = Y(:,sind); % the shock here should be initialised as contemporaneous to the response variable
    ylag = lagmatrix(Y, [1:nlag]);
    ylag = ylag(nlag+1:end,:);
    Teff = size(ylag, 1);

    % create final Y and X data vectors for LP
    x = [ones(Teff,1) shock(nlag+1:end,:) ylag];
    data_y = data(nlag+1:end,:);
    rpos = rind;
    transformation = 1;
    opt = 0;
    use_bootstrap = 0;
    
    % Estimate linlp on MC sample
    [liny, confidencey] = linlp(data_y, x, H, rpos, transformation, clevel, opt, use_bootstrap, nlag, n_straps,"normal");
    
    lower_ci = confidencey(1,:,:);
    upper_ci = confidencey(2,:,:);
    
    % Check coverage
    for h = 1:H
        coverage(i,h) = true_irf(h) >= lower_ci(:,h) & true_irf(h) <= upper_ci(:,h);
    end
    temp_coverage = mean(coverage(1:i,:), 1);
    
    disp(['Current coverage is: ', num2str(temp_coverage)])
    % Calculate and display timing for this iteration
    timePerLoop(i) = toc(iterStart);
    estimatedTimeRemaining = mean(timePerLoop(1:i)) * (n_MC - i);
    
    fprintf('Iteration %d/%d completed in %.2f seconds\n', i, n_MC, timePerLoop(i));
    fprintf('Estimated time remaining: %.2f minutes\n', estimatedTimeRemaining/60);
end

% Results
mean_coverage = mean(coverage,1); % 1 = rows, to "collapse" the rows

save("Bootstrap/results/lp_MC100_BS200.mat", "mean_coverage")

%% Monte Carlo simulation - SVAR with bootstrap

% specs for model average estimation
nlag = 4;
bootstrap_ci_method = "normal";
clevel = 1.96; % we are interested 95% CI
lambda = 0.5;
timePerLoop = zeros(n_MC, 1);  % Store time for each iteration
n_strap = 200;
n_MC = 300;

for i = 1:n_MC
    % Generate data from VAR(1)
    iterStart = tic;  % Start timing this iteration

    disp(['Running MC rep number ', num2str(i)]);
    Y = zeros(T, 3);
    eps = mvnrnd(zeros(3,1), D, T);
    for t = 2:T
        By_t = Y(t,:) + Y(t-1,:) * A' + eps(t,:);
        Y(t,:) = By_t * inv(B);
    end

    % prepare variables for estimation
    data = Y(:,rind);
    % not sure how to convert this here given we are no longer reg on a shock
    
    shock = Y(:,sind); % the shock here should be initialised as contemporaneous to the response variable
    ylag = lagmatrix(Y, [1:nlag]);
    ylag = ylag(nlag+1:end,:);
    Teff = size(ylag, 1);

    % create final Y and X data vectors for LP
    rpos = rind;    
    use_bootstrap = 1;
    
    % Estimate linlp on MC sample
    % VAR specs
    normalise = 1;
    y = Y;
    
    % Estimate linSVARLP_avg on MC sample
    [liny, confidencey] = linSVAR(y,H,nlag,rind,sind,clevel,use_bootstrap,B,normalise);
    
    lower_ci = confidencey(1,:,:);
    upper_ci = confidencey(2,:,:);
    
    % Check coverage
    for h = 1:H
        if h < 5
            disp([liny(h), true_irf(h)])
        else
        end
        coverage(i,h) = true_irf(h) >= lower_ci(:,h) & true_irf(h) <= upper_ci(:,h);
    end
    temp_coverage = mean(coverage(1:i,:), 1);
    
    disp(['Current coverage is: ', num2str(temp_coverage)])
    % Calculate and display timing for this iteration
    timePerLoop(i) = toc(iterStart);
    estimatedTimeRemaining = mean(timePerLoop(1:i)) * (n_MC - i);
    
    fprintf('Iteration %d/%d completed in %.2f seconds\n', i, n_MC, timePerLoop(i));
    fprintf('Estimated time remaining: %.2f minutes\n', estimatedTimeRemaining/60);
%     pause(5)
end

% Results
mean_coverage = mean(coverage,1); % 1 = rows, to "collapse" the rows

save("Bootstrap/results/lp_MC100_BS200.mat", "mean_coverage")

%% Plotting coverage rate
ci = 0.95;

res = load("Bootstrap/results/mdl_avg_MC100_BS200.mat");
coverage_data = res.mean_coverage

fig = figure;
hold on
plot(1:H, ci*ones(H,1), 'LineStyle','--', 'LineWidth', 1, 'Color','r');
plot(1:H, coverage_data, 'LineStyle', '-', 'LineWidth', 1, 'Color','black')
legend('95%', 'MC Coverage')
xlim([0,H])
ylim([0,1])
xlabel('Horizon of IRF')
ylabel('Average Coverage')
title('Monte Carlo Simulation of Model Average CIs (Bootstrap w/ Normal Assumption)')

subtitle(['Number of MC sims: ', num2str(n_MC), '; Number of bootstrap reps: ', num2str(n_bootstrap)]);

saveas(fig, 'Fig/MC_test_mdlavgbootstrap.png')

%% Plotting point estimate to see if roughly correct
close all
figure;
hold on
plot(true_irf)
plot(liny, 'Marker', 'X')
plot(mliny, 'Marker','o')
legend('True IRF', 'Last IRF Point Est', 'Last IRF Point Est Matlab')


%% Try a simulation with zero error terms for SVAR

% specs for estimation
nlag = 1;
bootstrap_ci_method = "normal";
clevel = 1.96; % we are interested 95% CI
lambda = 0.5;
timePerLoop = zeros(n_MC, 1);  % Store time for each iteration
B = 200;
n_MC = 300;

Y = zeros(T, 3);
rng('default')  % For reproducibility
eps = mvnrnd(zeros(3,1), D, T);
for t = 2:T
    By_t = Y(t,:) + Y(t-1,:) * A' + eps(t,:);
    Y(t,:) = By_t * inv(B);
end

%%
var_model = varm(3,1);

est_var1 = estimate(var_model, Y);

resp = irf(est_var1); % default computes IRFs via lower triangular cholesky decomposition

mliny = resp(:,1,3)/resp(1,1,1);

%%

% prepare variables for estimation
data = Y(:,rind);
shock = Y(:,sind); % the shock here should be initialised as contemporaneous to the response variable
ylag = lagmatrix(Y, [1:nlag]);
ylag = ylag(nlag+1:end,:);
Teff = size(ylag, 1);

% create final Y and X data vectors for LP
rpos = rind;    
use_bootstrap = 1;

% Estimate linlp on MC sample
% VAR specs
normalise = 1;
y = Y;

% Estimate linSVARLP_avg on MC sample
[liny, confidencey] = linSVAR(y,H,nlag,rind,sind,clevel,use_bootstrap,B,normalise);



